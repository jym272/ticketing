apiVersion: v1
kind: Service
metadata:
  name: db-payments
spec:
  clusterIP: None
  selector:
    db: payments
  ports:
    - protocol: TCP
      port: 5432
      name: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-payments
  annotations:
    datree.skip/CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE: too much overhead to implement this.
spec:
  selector:
    matchLabels:
      db: payments
  serviceName: "db-payments"
  replicas: 1 # the same number of volumes is needed
  minReadySeconds: 10
  template:
    metadata:
      labels:
        db: payments
    spec:
      initContainers:
        - name: create-dir-if-not-exists
          imagePullPolicy: IfNotPresent
          image: busybox:1.36.0
          command:
            - /bin/sh
            - -c
            - |
              if [ ! -d /var/lib/postgresql/data/pgdata ]; then
                mkdir -p /var/lib/postgresql/data/pgdata
                chown -R 10001:10000 /var/lib/postgresql/data/pgdata
                echo "created directory /var/lib/postgresql/data/pgdata"
              else
                echo "directory /var/lib/postgresql/data/pgdata already exists"
              fi
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: payments-claim
      containers:
        - name: db-payments
          image: postgres:15.2
          imagePullPolicy: IfNotPresent
          securityContext:
            seccompProfile:
              type: Unconfined
            capabilities:
              drop: [ "NET_RAW" ]
#            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 10001 #postgres
            runAsGroup: 10000 #postgres
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: sealed-secret-postgres
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              value: payments
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sealed-secret-postgres
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          livenessProbe:
            exec:
              command: ["psql", "-U", "jorge", "-d", "payments", "-c", "SELECT 1"]
            initialDelaySeconds: 3
            periodSeconds: 5
            failureThreshold: 2
          readinessProbe:
            exec:
              command: ["psql", "-U", "jorge", "-d", "payments", "-c", "SELECT 1"]
            initialDelaySeconds: 3
            periodSeconds: 5
            failureThreshold: 2
          startupProbe:
            exec:
              command: [ "pg_isready", "-U", "jorge", "-d", "payments" ]
            periodSeconds: 1
            failureThreshold: 30
          resources:
            requests:
              cpu: 40m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - mountPath: var/lib/postgresql/data
              name: payments-claim
      volumes:
        - name: payments-claim
          persistentVolumeClaim:
            claimName: postgres-payments-pvc




