apiVersion: v1
kind: Service
metadata:
  name: db-orders
spec:
  clusterIP: None
  selector:
    db: orders
  ports:
    - protocol: TCP
      port: 5432
      name: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-orders
spec:
  selector:
    matchLabels:
      db: orders
  serviceName: "db-orders"
  replicas: 1 # the same number of volumes is needed
  minReadySeconds: 10
  template:
    metadata:
      labels:
        db: orders
    spec:
      containers:
        - name: db-orders
          image: postgres:15.1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: sealed-secret-postgres
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              value: orders
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sealed-secret-postgres
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          livenessProbe:
            exec:
              command: ["psql", "-U", "jorge", "-d", "orders", "-c", "SELECT 1"]
            initialDelaySeconds: 3
            periodSeconds: 5
            failureThreshold: 2
          readinessProbe:
            exec:
              command: ["psql", "-U", "jorge", "-d", "orders", "-c", "SELECT 1"]
            initialDelaySeconds: 3
            periodSeconds: 5
            failureThreshold: 2
          resources:
            requests:
              cpu: 40m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - mountPath: var/lib/postgresql/data
              name: orders-claim
      volumes:
        - name: orders-claim
          persistentVolumeClaim:
            claimName: postgres-orders-pvc





