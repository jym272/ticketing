apiVersion: v1
kind: Service
metadata:
  name: db-auth
spec:
  clusterIP: None
  selector:
    db: auth
  ports:
    - protocol: TCP
      port: 5432
      name: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-auth
  annotations:
    datree.skip/CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE: too much overhead to implement this.
spec:
  selector:
    matchLabels:
      db: auth
  serviceName: "db-auth"
  replicas: 1 # the same number of volumes is needed
  minReadySeconds: 10
  template:
    metadata:
      labels:
        db: auth
    spec:
      initContainers:
        - name: create-dir-if-not-exists
          imagePullPolicy: IfNotPresent
          image: busybox:1.36.0
          command:
            - /bin/sh
            - -c
            - |
              if [ ! -d /var/lib/postgresql/data/pgdata ]; then
                mkdir -p /var/lib/postgresql/data/pgdata
                chown -R 10001:10000 /var/lib/postgresql/data/pgdata
                echo "created directory /var/lib/postgresql/data/pgdata"
              else
                echo "directory /var/lib/postgresql/data/pgdata already exists"
              fi
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: data
      containers:
        - name: db-auth
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            seccompProfile:
              type: Unconfined # supported values: "Localhost", "RuntimeDefault"(doesnt work wit liveness), "Unconfined"
            capabilities:
              drop: [ "NET_RAW" ]
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10000
          env:
            - name: POSTGRES_DB
              value: auth
            - name: POSTGRES_PASSWORD_FILE
              value: /run/secrets/auth-passwd/POSTGRES_PASSWORD
            - name: POSTGRES_USER_FILE
              value: /run/secrets/auth-passwd/POSTGRES_USER
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  user=$(cat /run/secrets/auth-passwd/POSTGRES_USER)
                  psql -U "$user" -d auth -c "SELECT 1"
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  user=$(cat /run/secrets/auth-passwd/POSTGRES_USER)
                  psql -U "$user" -d auth -c "SELECT 1"
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  user=$(cat /run/secrets/auth-passwd/POSTGRES_USER)
                  pg_isready -U "$user" -d "$POSTGRES_DB"
            periodSeconds: 2
            failureThreshold: 15
            successThreshold: 1
          resources:
            requests:
              cpu: 40m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - mountPath: var/lib/postgresql/data
              name: data
            - mountPath: /run/secrets/auth-passwd
              name: secret-volume
              readOnly: true
      volumes:
        - name: secret-volume
          secret:
            secretName: sealed-secret-postgres
            optional: false
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
#        storageClassName: postgres-auth-sc




