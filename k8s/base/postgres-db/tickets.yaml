apiVersion: v1
kind: Service
metadata:
  name: db-tickets
spec:
  clusterIP: None
  selector:
    db: tickets
  ports:
    - protocol: TCP
      port: 5432
      name: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-tickets
  annotations:
    datree.skip/CONTAINERS_INCORRECT_READONLYROOTFILESYSTEM_VALUE: too much overhead to implement this.
spec:
  selector:
    matchLabels:
      db: tickets
  serviceName: "db-tickets"
  replicas: 1 # the same number of volumes is needed
  minReadySeconds: 10
  template:
    metadata:
      labels:
        db: tickets
    spec:
      # mkdir: cannot create directory ‘/var/lib/postgresql/data/pgdata’: Permission denied, fixing with a initContainer
      # chown -R 999:999 /var/lib/postgresql/data/pgdata
      initContainers:
        - name: create-dir-if-not-exists
          imagePullPolicy: IfNotPresent
          image: busybox:1.36.0
          command:
            - /bin/sh
            - -c
            - |
              if [ ! -d /var/lib/postgresql/data/pgdata ]; then
                mkdir -p /var/lib/postgresql/data/pgdata
                chown -R 10001:10000 /var/lib/postgresql/data/pgdata
                echo "created directory /var/lib/postgresql/data/pgdata"
              else
                echo "directory /var/lib/postgresql/data/pgdata already exists"
              fi
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: tickets-claim
      containers:
        - name: db-tickets
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            seccompProfile:
              type: Unconfined
            capabilities:
              drop: [ "NET_RAW" ]
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10000
          env:
            - name: POSTGRES_DB
              value: tickets
            - name: POSTGRES_PASSWORD_FILE
              value: /run/secrets/auth-passwd/POSTGRES_PASSWORD
            - name: POSTGRES_USER_FILE
              value: /run/secrets/auth-passwd/POSTGRES_USER
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  user=$(cat /run/secrets/auth-passwd/POSTGRES_USER)
                  psql -U "$user" -d tickets -c "SELECT 1"
            initialDelaySeconds: 3
            periodSeconds: 5
            failureThreshold: 2
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  user=$(cat /run/secrets/auth-passwd/POSTGRES_USER)
                  psql -U "$user" -d tickets -c "SELECT 1"
            initialDelaySeconds: 3
            periodSeconds: 5
            failureThreshold: 2
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  user=$(cat /run/secrets/auth-passwd/POSTGRES_USER)
                  pg_isready -U "$user"
            periodSeconds: 1
            failureThreshold: 30
          resources:
            requests:
              cpu: 40m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - mountPath: var/lib/postgresql/data
              name: tickets-claim
            - mountPath: /run/secrets/auth-passwd
              name: secret-volume
              readOnly: true
      volumes:
        - name: tickets-claim
          persistentVolumeClaim:
            claimName: postgres-tickets-pvc
        - name: secret-volume
          secret:
            secretName: sealed-secret-postgres
            optional: false





